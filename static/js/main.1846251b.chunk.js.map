{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","robot","id","name","email","className","alt","src","CardList","robotList","map","r","key","SearchBox","searchBox","onSearchChange","type","placeholder","onChange","Scroll","style","overflowY","height","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","handleSearchChange","robots","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","isending","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1846251b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nconst Card = (props) => {\n\tconst {id, name, email} = props.robot;\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t\t)\n}\n\n export default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robotList})=> {\n\treturn (\n\t\t<div>\n\t\t\t{robotList.map(r => <Card key={r.id} robot={r} />)}\n\t\t</div>\n\t\t)\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchBox, onSearchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\ttype=\"search\" placeholder=\"search robots\"\n\t\t\tonChange={onSearchChange}\n\t\t\t/>\n\t\t</div>\n\t\t)\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', height: '500px', border: '1px solid black'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll","import React, {Component} from 'react'\n\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops! Someting went wrong.</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\nimport Scroll from './Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport {setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\thandleSearchChange: (event) =>  dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst {searchField, handleSearchChange, robots, isPending} = this.props\n\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\tif (isPending) {\n\t\t\treturn <h1 className=\"tc\">Loading...</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1 className=\"f1\">RobotFriends</h1>\n\t\t\t\t\t\t<SearchBox onSearchChange={handleSearchChange}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robotList={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {CHANGE_SEARCH_FIELD,\n\t\tREQUEST_ROBOTS_PENDING,\n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAILED\n\t} from './constants.js'\n\nexport const setSearchField = text => {\n\treturn {\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t}\n}\n\nexport const requestRobots = () => dispatch => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {CHANGE_SEARCH_FIELD,\n\t\tREQUEST_ROBOTS_PENDING,\n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAILED\n\t} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\treturn state\n\t}\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn {...state, isPending: true}\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn {...state, robots: action.payload, isPending: false}\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn {...state, error: action.payload, isPending: false}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './containers/App'\nimport { searchRobots, requestRobots } from './reducers'\nimport thunkMiddleware from 'redux-thunk'\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(thunkMiddleware)\n\t)\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n  \t<App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}