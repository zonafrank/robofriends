{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","robots.js","components/SearchBox.js","containers/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","robot","id","name","email","className","alt","src","CardList","robotList","map","r","key","robots","username","SearchBox","searchBox","onSearchChange","type","placeholder","onChange","Scroll","style","overflowY","height","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","searchField","handleSearchChange","bind","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.473d1bc0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nconst Card = (props) => {\n\tconst {id, name, email} = props.robot;\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t\t)\n}\n\n export default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robotList})=> {\n\treturn (\n\t\t<div>\n\t\t\t{robotList.map(r => <Card key={r.id} robot={r} />)}\n\t\t</div>\n\t\t)\n}\n\nexport default CardList","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react'\n\nconst SearchBox = ({searchBox, onSearchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\ttype=\"search\" placeholder=\"search robots\"\n\t\t\tonChange={onSearchChange}\n\t\t\t/>\n\t\t</div>\n\t\t)\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', height: '500px', border: '1px solid black'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll","import React, {Component} from 'react'\n\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops! Someting went wrong.</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react'\nimport CardList from '../components/CardList'\nimport {robots} from '../robots'\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\nimport Scroll from './Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t}\n\t\tthis.handleSearchChange = this.handleSearchChange.bind(this)\n\t}\n\n\tasync handleSearchChange (event) {\n\t\tawait this.setState({searchField: event.target.value})\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({robots:robots}))\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n\t\t})\n\t\tif (this.state.robots.length === 0) {\n\t\t\treturn <h1 className=\"tc\">Loading...</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1 className=\"f1\">RobotFriends</h1>\n\t\t\t\t\t\t<SearchBox onSearchChange={this.handleSearchChange}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robotList={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t}\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n  <div>\n  \t<App />\n  </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}